#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }

template <typename T, typename V>
void __print(const pair<T, V> &x)
{
	cerr << '{';
	__print(x.first);
	cerr << ',';
	__print(x.second);
	cerr << '}';
}
template <typename T>
void __print(const T &x)
{
	int f = 0;
	cerr << '{';
	for (auto &i : x)
		cerr << (f++ ? "," : ""), __print(i);
	cerr << "}";
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V>
void _print(T t, V... v)
{
	__print(t);
	if (sizeof...(v))
		cerr << ", ";
	_print(v...);
}
#ifndef ONLINE_JUDGE
#define debug(x...)               \
	cerr << "[" << #x << "] = ["; \
	_print(x)
#else
#define debug(x...)
#endif
#define IOS                  \
	ios::sync_with_stdio(0); \
	cin.tie(0);              \
	cout.tie(0);
#define endl "\n"
#define YES printf("YES\n")
#define NO printf("NO\n")
#define YES printf("YES\n")
#define NO printf("NO\n")
#define NOo printf("-1\n")
#define srt(x) sort(x.begin(), x.end())
#define rsrt(x) sort(x.rbegin(), x.rend())
#define ull unsigned long long
#define ll long long
#define pb push_back
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define pii pair<int, int>
#define piii pair<int, pii>
#define vpll vector<pair<ll, ll>>
#define min_heap priority_queue<int, vector<int>, greater<int>>
const ll mod = 1000000007;
const ll INF = 1e9;
const ll N = 10000007;
#define vll vector<long long>
#define mll map<long long, long long>
vll vec;
mll vis;
map<ll, vll> adj;
vector<vector<ll>> res;
struct edge
{
	ll x, y;
};
vector<edge> cows;
void dfs(ll node)
{
	vis[node] = 1;
	vec.pb(node);
	for (auto it : adj[node])
	  if(!vis[it])
		dfs(it);
}
void solve()
{

	ll ans = INF, ct = 0, u = 0, v, i, b = 0, wt, n, k = -1, source, des = -1, l = 0;
	cin >> n >> k;
	for (i = 1; i <= n; i++)
	{
		cin >> u >> v;
		cows.push_back({u, v});
	}
	for (i = 1; i <= k; i++)
	{
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	for (i = 1; i <= n; i++)
	{
		if (!vis[i])
		{
			vec.clear();
			dfs(i);
			res.pb(vec);
		}
	}
	for (vector<ll> network : res)
	{
		ll max_x = 0;
		ll min_x = INF;
		ll max_y = 0;
		ll min_y = INF;
		for (auto it : network)
		{
			max_x = max(max_x, cows[it - 1].x);
			min_x = min(min_x, cows[it - 1].x);
			max_y = max(max_y, cows[it - 1].y);
			min_y = min(min_y, cows[it - 1].y);
		}
		
		ans = min(ans, 2 * (max_x - min_x) + 2 * (max_y - min_y));
	}
	cout << ans << endl;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	freopen("fenceplan.in", "r", stdin);
	freopen("fenceplan.out", "w", stdout);
	ll t = 1;
	// cin >> t;
	while (t--)
	{
		solve();
	}
}
